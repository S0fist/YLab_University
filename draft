from sys import maxsize
from itertools import permutations
import re

V = 6


def travellingSalesmanProblem(graph, s):
    # store all vertex apart from source vertex
    vertex = []
    pathlist = []
    for i in range(V):
        if i != s:
            vertex.append(i)

    # store minimum weight Hamiltonian Cycle
    min_path = maxsize
    next_permutation = permutations(vertex)
    for i in next_permutation:

        # store current Path weight(cost)
        current_pathweight = 0

        k = s
        for j in i:
            print(k, "->", j)
            current_pathweight += graph[k][j]
            print(current_pathweight)
            k = j
        current_pathweight += graph[k][s]
        print(current_pathweight, '\n')
        min_path = min(min_path, current_pathweight)
        if current_pathweight == min_path:
            pathlist.append(i)
    return min_path, pathlist[-2]

def openInput(fin):
    lop = []
    loi = fin.readlines()
    los = []
    fin.close()
    for loi in loi:
        match = re.search(r'\d, \d', loi)
        rematch = re.search(r'\(\d, \d\)', loi)
        lop.append(match.group().split(', '))
        los.append(rematch.group())
    return los


def matrixCore():
    shos = []
    lop = openInput(open('input.txt', 'r', encoding="utf-8"))
    for lop in lop:
        match = re.search(r'\d, \d', lop)
        shos.append(match.group().split(', '))
    matrix_list = []
    spis = []
    count = 0
    for x1, y1 in shos:
        for x2, y2 in shos:
            a = ((int(x2) - int(x1)) ** 2 + (int(y2) - int(y1)) ** 2) ** 0.5
            matrix_list.append(a)
            if len(matrix_list) == V:
                spis.append(matrix_list[::])
                matrix_list.clear()
            count += 1
    return spis

if __name__ == "__main__":
    graph = matrixCore()
    s = 0
    c = 0
    # print(travellingSalesmanProblem(graph, s))

    for i in travellingSalesmanProblem(graph, s):
        if type(i) == float:
            print("Минимальный путь: ", i)
        else:
            k = openInput(open('input.txt', 'r', encoding="utf-8"))
            print(k[0], "->", end=' ')
            for j in i:
                c += graph[j - 1][j]
                print(f'{k[j]}: {c} ->', end=' ')
            print(k[0])
